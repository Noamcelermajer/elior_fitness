LOCAL DEVELOPMENT SETUP

PROJECT CONFIGURATION: Optimized for local development on Windows

QUICK START SCRIPTS:
- start-local.bat: Start both backend and frontend (easiest)
- start-backend-local.bat: Start backend only (port 8000)
- start-frontend.bat: Start frontend only (port 5173)
- start-docker.bat: Start with Docker (port 8000)

PREREQUISITES:
- Python 3.11+ (for backend)
- Node.js 18+ (for frontend)
- Docker Desktop (optional, for Docker mode)

LOCAL DEVELOPMENT MODES:

1. SEPARATE SERVERS (Recommended for Development):
   - Backend: http://localhost:8000 (FastAPI with uvicorn --reload)
   - Frontend: http://localhost:5173 (Vite dev server)
   - Auto-reload: Both servers watch for file changes
   - API Calls: Frontend â†’ http://localhost:8000/api
   - Start: Run start-local.bat

2. DOCKER MODE (Production-like):
   - Application: http://localhost:8000
   - Single container with built frontend
   - Start: Run start-docker.bat
   - Use: Testing production builds

DATABASE:
- Type: SQLite
- Location: ./data/elior_fitness.db
- Auto-created on first run
- Reset: Delete the .db file and restart

DEFAULT TEST USERS:
Admin: admin@elior.com / admin123
Trainer: trainer@elior.com / trainer123
Client: client@elior.com / client123

DIRECTORY STRUCTURE:
app/ - Backend Python code (FastAPI)
Frontend/ - Frontend React code (TypeScript)
data/ - SQLite database
uploads/ - User uploaded files
logs/ - Application logs
tests/ - Test files
context/ - Project documentation

ENVIRONMENT VARIABLES:
Backend (in docker-compose.yml or system):
- ENVIRONMENT=development
- PORT=8000
- DATABASE_PATH=./data/elior_fitness.db
- CORS_ORIGINS=http://localhost:3000,http://localhost:5173,http://localhost:8000

Frontend (in Frontend/.env.local):
- VITE_API_URL=http://localhost:8000/api

KEY FILES:
- app/main.py: FastAPI application entry point
- Frontend/src/App.tsx: React application entry point
- Frontend/src/config/api.ts: API configuration (auto-detects environment)
- docker-compose.yml: Docker configuration
- requirements.txt: Python dependencies
- Frontend/package.json: Node.js dependencies

DEVELOPMENT WORKFLOW:
1. Start servers with start-local.bat
2. Open http://localhost:5173 in browser
3. Login with test user
4. Make changes to code
5. Changes auto-reload in browser/server
6. View API docs at http://localhost:8000/docs

TROUBLESHOOTING:
- Port conflicts: Kill process on port 8000 or 5173
- Module errors: Reinstall dependencies (pip install -r requirements.txt)
- Database errors: Delete data/elior_fitness.db and restart
- CORS errors: Ensure both servers are running
- API connection: Check Frontend/src/config/api.ts and .env.local

TESTING:
- Backend tests: python tests/run_tests.py
- Frontend type check: cd Frontend && npm run typecheck
- API testing: Use http://localhost:8000/docs (Swagger UI)

BUILDING FOR PRODUCTION:
1. Build frontend: build-frontend.bat
2. Frontend dist copied to static/ folder
3. FastAPI serves built frontend
4. Test with Docker: start-docker.bat

GIT WORKFLOW:
- main branch: Stable code
- last branch: Latest working code
- local-development-fixes: Current development branch
- Always commit before major changes

DOCUMENTATION:
- LOCAL_DEVELOPMENT_GUIDE.md: Complete setup guide
- PROJECT_SETUP_SUMMARY.md: Quick reference
- context/: Detailed project documentation
- docs/: Additional technical documentation

NEXT STEPS AFTER SETUP:
1. Review LOCAL_DEVELOPMENT_GUIDE.md
2. Start application with start-local.bat
3. Open browser to http://localhost:5173
4. Login with test user
5. Explore API at http://localhost:8000/docs
6. Read context files for project details

