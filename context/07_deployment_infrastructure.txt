# Deployment Infrastructure

## Overview
Elior Fitness uses a modern, containerized deployment strategy that can be run locally or deployed to any cloud platform. The application uses FastAPI serving both the API and frontend static files.

## Architecture

### Local Development (Primary Setup)
```
Option 1 (Docker):
Localhost → Docker → FastAPI Container (Port 8000) → Static Files + API

Option 2 (Native):
Localhost → FastAPI (Port 8000) + Vite Dev Server (Port 5173)
```

### Cloud Deployment (Optional)
```
Internet → Cloud Platform → FastAPI Container (Port $PORT) → Static Files + API
Supported platforms: Railway, Render, Heroku, AWS, Azure, GCP, etc.
```

## Container Strategy

### Multi-Stage Docker Build
1. **Frontend Builder Stage**: Node.js builds React app
2. **Production Stage**: Python/FastAPI serves built files

### Benefits
- **Single Service**: Simplified deployment and maintenance
- **Railway Optimized**: Perfect compatibility with Railway's `$PORT` system
- **Performance**: No proxy overhead, optimized static serving
- **Security**: No Node.js in production runtime

## Local Development Configuration

### Quick Start Scripts (Windows)
- `start-local.bat` - Start both backend and frontend locally
- `start-docker.bat` - Start with Docker
- `start-backend-local.bat` - Start backend only (Python)
- `start-frontend.bat` - Start frontend only (Vite)

### Port Configuration
- **Backend API**: 8000 (default)
- **Frontend Dev**: 5173 (Vite default)
- **Health Check**: `/health` endpoint

### Environment Variables (Local)
- `ENVIRONMENT=development`
- `DOMAIN=localhost`
- `CORS_ORIGINS=http://localhost:3000,http://localhost:5173,http://localhost:8000`
- `PORT=8000`
- `DATABASE_PATH=./data/elior_fitness.db`
- `LOG_LEVEL=INFO`

### Cloud Deployment (Optional)
The application can be deployed to any cloud platform with `railway.json` provided as an example configuration for Railway platform.

## Docker Configuration

### Production Dockerfile
```dockerfile
# Multi-stage build for optimal size and security
FROM node:18-slim AS frontend-builder
# Build React app

FROM python:3.11-slim
# Install dependencies and copy built frontend
# Start FastAPI with Railway port support
```

### Local Development (`docker-compose.yml`)
```yaml
services:
  elior-fitness:
    build: .
    ports:
      - "8000:8000"
    volumes:
      - ./uploads:/app/uploads
      - ./data:/app/data
      - ./logs:/app/logs
    environment:
      - ENVIRONMENT=development
      - DOMAIN=localhost
      - PORT=8000
      - DATABASE_PATH=/app/data/elior_fitness.db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
```

## Performance Optimizations

### Static File Serving
- **In-Memory Caching**: Index.html cached for 5 minutes
- **Asset Caching**: Static assets cached for 1 year
- **Compression**: Automatic gzip compression
- **CDN Ready**: Optimized headers for CDN integration

### FastAPI Optimizations
- **Response Caching**: Cache frequently requested data
- **Compression**: Automatic response compression
- **Connection Pooling**: Optimized database connections
- **Background Tasks**: Async processing for heavy operations

## Security Features

### Container Security
- **Non-Root User**: Application runs as non-root user
- **Minimal Base Image**: Python slim image for smaller attack surface
- **No Development Dependencies**: Only production dependencies in final image
- **Secure File Permissions**: Proper file ownership and permissions

### Application Security
- **JWT Authentication**: Secure token-based authentication
- **Input Validation**: Comprehensive request validation
- **SQL Injection Protection**: Parameterized queries
- **File Upload Security**: Validation and virus scanning

## Monitoring & Health Checks

### Health Check Endpoints
- `GET /health` - Basic health check
- `GET /health/detailed` - Detailed health information
- `GET /metrics` - Application metrics

### Railway Health Checks
- **Path**: `/health`
- **Timeout**: 300 seconds
- **Retries**: 3 attempts
- **Interval**: 30 seconds

### Logging
- **Structured Logging**: JSON format for easy parsing
- **Log Levels**: DEBUG, INFO, WARNING, ERROR, CRITICAL
- **Performance Logging**: Request timing and database query logs
- **Error Tracking**: Comprehensive error logging with stack traces

## Deployment Process

### Local Development (Primary)

#### With Docker:
1. **Start Docker Desktop**
2. **Run**: `start-docker.bat`
3. **Access**: `http://localhost:8000`

#### Without Docker (Recommended for Development):
1. **Setup**: Install Python 3.11+ and Node.js 18+
2. **Run**: `start-local.bat`
3. **Access**: 
   - Frontend: `http://localhost:5173`
   - Backend: `http://localhost:8000`

### Cloud Deployment (Optional)
1. **Build Image**: `docker build -t elior-fitness .`
2. **Test Locally**: `docker run -p 8000:8000 elior-fitness`
3. **Deploy**: Push to your cloud platform (Railway, Render, etc.)
4. **Configure**: Set environment variables on platform
5. **Monitor**: Check logs and health endpoints

## Scaling Strategy

### Horizontal Scaling
- **Railway Auto-Scaling**: Automatic scaling based on traffic
- **Load Balancing**: Railway handles load distribution
- **Stateless Design**: Application is stateless for easy scaling

### Performance Monitoring
- **Response Times**: Monitor API response times
- **Error Rates**: Track error rates and types
- **Resource Usage**: Monitor CPU and memory usage
- **Database Performance**: Track query performance

## Backup & Recovery

### Database Backup
- **SQLite Database**: File-based backup at `./data/elior_fitness.db`
- **Simple Backup**: Copy the database file to backup location
- **Docker Volume**: Data persisted in `./data/` folder
- **Recovery**: Simply restore the `.db` file

### Application Recovery
- **Health Checks**: Automatic health monitoring
- **Restart Policy**: Automatic restart on failure
- **Rollback Strategy**: Quick rollback to previous version
- **Disaster Recovery**: Complete system recovery procedures

## SSL/TLS Configuration

### Railway SSL
- **Automatic SSL**: Railway provides automatic SSL certificates
- **Custom Domains**: Support for custom domain SSL
- **HTTPS Redirect**: Automatic HTTP to HTTPS redirect
- **Security Headers**: Proper security headers configuration

## Development Workflow

### Local Development
1. **Start Application**: Run `start-local.bat`
2. **Make Changes**: Edit code in `app/` (backend) or `Frontend/src/` (frontend)
3. **Auto-Reload**: Both servers auto-reload on changes
4. **Test**: Test functionality in browser
5. **Commit**: Commit changes to Git

### Backend Development
1. **Start**: `start-backend-local.bat`
2. **Edit**: Change files in `app/`
3. **Test**: Use API docs at `http://localhost:8000/docs`
4. **Logs**: Check console or `logs/` folder

### Frontend Development
1. **Start**: `start-frontend.bat`
2. **Edit**: Change files in `Frontend/src/`
3. **Test**: Browser auto-reloads on changes
4. **API**: Configure in `Frontend/src/config/api.ts`

### Building for Production
1. **Build Frontend**: `build-frontend.bat`
2. **Test Docker**: `start-docker.bat`
3. **Deploy**: Push to cloud platform (optional)

## Troubleshooting

### Common Issues
1. **Port Conflicts**: Ensure application uses `$PORT` environment variable
2. **Health Check Failures**: Verify `/health` endpoint returns 200
3. **Static File Issues**: Check static file serving configuration
4. **Database Issues**: Verify database connection and permissions

### Debugging Tools
- **Console Logs**: Check terminal output for errors
- **Log Files**: Check `logs/` folder for detailed logs
- **Health Checks**: Monitor `/health` endpoint
- **Metrics**: Use `/metrics` endpoint for performance data
- **API Docs**: Use `/docs` for interactive API testing

## Future Enhancements

### Planned Improvements
1. **CDN Integration**: Add CDN for static assets
2. **Database Migration**: Consider PostgreSQL for production
3. **Monitoring**: Add application performance monitoring
4. **CI/CD**: Implement automated testing and deployment

### Scalability Considerations
1. **Microservices**: Consider breaking into microservices
2. **Caching**: Add Redis for session and data caching
3. **Load Balancing**: Implement custom load balancing
4. **Database Sharding**: Consider database sharding for scale 