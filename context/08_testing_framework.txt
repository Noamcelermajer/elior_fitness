TESTING FRAMEWORK (Pytest)

TEST STRUCTURE:
tests/ - Main test directory
- test_auth.py: Authentication and authorization tests
- test_users.py: User management and CRUD tests
- test_workouts.py: Workout system and exercise tests
- test_nutrition.py: Nutrition management tests
- test_meal_plans.py: Advanced meal planning tests
- test_progress.py: Progress tracking tests
- test_integration.py: End-to-end workflow tests
- test_core_functionality.py: Core system tests
- test_minimal.py: Minimal functionality tests

TEST CONFIGURATION:
pytest.ini: Test configuration and markers
- Test discovery patterns
- Coverage reporting settings
- Custom markers for test categorization
- Performance and timeout settings

TEST RUNNERS:
run_tests.py: Comprehensive test runner (15KB, 396 lines)
- Automated test execution
- Coverage reporting
- Performance monitoring
- Test result analysis
- Multiple test scenarios

run_tests.bat: Windows batch script for test execution
run_tests.sh: Linux shell script for test execution
test-local.sh: Local development testing

TEST CATEGORIES:

AUTHENTICATION TESTS:
- User registration and login
- JWT token validation
- Password management
- Role-based access control
- Session management

USER MANAGEMENT TESTS:
- User CRUD operations
- Trainer-client relationships
- Profile management
- Authorization enforcement

WORKOUT SYSTEM TESTS:
- Exercise bank management
- Workout plan creation
- Exercise assignment
- Progress tracking
- Analytics and reporting

NUTRITION TESTS:
- Nutrition entry management
- Analytics and reporting
- Meal planning workflows

MEAL PLAN TESTS:
- Advanced meal plan management
- Meal components tracking
- Photo uploads and approval
- Macronutrient goals

FILE MANAGEMENT TESTS:
- File uploads and validation
- Image processing
- Access control
- Security validation

INTEGRATION TESTS:
- End-to-end workflows
- Cross-component interactions
- Complete user journeys
- System integration

SECURITY TESTS:
- Authentication bypass attempts
- SQL injection prevention
- XSS protection
- File upload security

PERFORMANCE TESTS:
- Response time validation
- Concurrent request handling
- Memory usage simulation
- Database performance

TEST COVERAGE:
- Target: 90%+ coverage across all components
- Unit tests for individual functions
- Integration tests for component interactions
- End-to-end tests for complete workflows
- Security tests for vulnerability prevention

TEST DATA:
init_test_users.py: Test user initialization
- Sample admin, trainer, and client accounts
- Test data for all system components
- Realistic workout and nutrition data

TEST RESULTS:
logs/test_results_*.json: Test execution results
- Performance metrics
- Coverage reports
- Error analysis
- Test statistics

TESTING TOOLS:
- pytest: Main testing framework
- pytest-asyncio: Async test support
- pytest-cov: Coverage reporting
- httpx: HTTP client for API testing
- factory-boy: Test data generation
- pytest-mock: Mocking and patching

TEST EXECUTION:
python -m pytest: Run all tests
python -m pytest --cov=app: Run with coverage
python -m pytest tests/test_auth.py: Run specific test file
python -m pytest -m "not slow": Run tests excluding slow markers
python -m pytest -m "security": Run security tests only

QUALITY ASSURANCE:
- Automated test execution
- Continuous integration ready
- Performance benchmarking
- Security validation
- Code quality checks 