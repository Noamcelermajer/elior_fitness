version: '3.8'

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: elior-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./uploads:/app/uploads:ro
      - ./Frontend/dist:/var/www/html:ro  # Frontend build files
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - elior-network

  # FastAPI Application
  api:
    build: 
      context: .
      dockerfile: Dockerfile.prod
    container_name: elior-api
    expose:
      - "8000"
    volumes:
      - ./uploads:/app/uploads
      - sqlite_data:/app/data
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=sqlite:///./data/elior_fitness.db
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - CORS_ORIGINS=${CORS_ORIGINS}
      - DOMAIN=${DOMAIN}
      - MAX_FILE_SIZE=10485760
      - UPLOAD_DIR=/app/uploads
    restart: unless-stopped
    networks:
      - elior-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: PostgreSQL for production (uncomment to use)
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: elior-postgres
  #   environment:
  #     - POSTGRES_DB=elior_fitness
  #     - POSTGRES_USER=${DB_USER}
  #     - POSTGRES_PASSWORD=${DB_PASSWORD}
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   expose:
  #     - "5432"
  #   restart: unless-stopped
  #   networks:
  #     - elior-network

  # Optional: Redis for caching (uncomment to use)
  # redis:
  #   image: redis:7-alpine
  #   container_name: elior-redis
  #   expose:
  #     - "6379"
  #   volumes:
  #     - redis_data:/data
  #   restart: unless-stopped
  #   networks:
  #     - elior-network
  #   command: redis-server --appendonly yes

volumes:
  sqlite_data:
  # postgres_data:  # Uncomment if using PostgreSQL
  # redis_data:     # Uncomment if using Redis

networks:
  elior-network:
    driver: bridge